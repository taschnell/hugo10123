#include <ncurses.h>
#include <vector>
#include <iostream>

using namespace std;

class Pieces
{
public:
    int square[4][5][5] = {
        {{0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0},
         {0, 0, 2, 1, 0},
         {0, 0, 1, 1, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0},
         {0, 0, 2, 1, 0},
         {0, 0, 1, 1, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0},
         {0, 0, 2, 1, 0},
         {0, 0, 1, 1, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0},
         {0, 0, 2, 1, 0},
         {0, 0, 1, 1, 0},
         {0, 0, 0, 0, 0}},
    };
    int default_I[4][5][5] = {
        {{0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0},
         {0, 1, 2, 1, 1},
         {0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 2, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 1, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0},
         {1, 1, 2, 1, 0},
         {0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 1, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 2, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 0, 0, 0}},
    };
    int default_L[4][5][5] = {
        {{0, 0, 0, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 2, 0, 0},
         {0, 0, 1, 1, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0},
         {0, 1, 2, 1, 0},
         {0, 1, 0, 0, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 1, 1, 0, 0},
         {0, 0, 2, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 0, 1, 0},
         {0, 1, 2, 1, 0},
         {0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0}},
    };
    int mirror_L[4][5][5] = {
        {{0, 0, 0, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 2, 0, 0},
         {0, 1, 1, 0, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 1, 0, 0, 0},
         {0, 1, 2, 1, 0},
         {0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 1, 1, 0},
         {0, 0, 2, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0},
         {0, 1, 2, 1, 0},
         {0, 0, 0, 1, 0},
         {0, 0, 0, 0, 0}},
    };
    int default_N[4][5][5] = {
        {{0, 0, 0, 0, 0},
         {0, 0, 0, 1, 0},
         {0, 0, 2, 1, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0},
         {0, 1, 2, 0, 0},
         {0, 0, 1, 1, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 1, 2, 0, 0},
         {0, 1, 0, 0, 0},
         {0, 0, 0, 0, 0}},

        {{0, 0, 0, 0, 0},
         {0, 1, 1, 0, 0},
         {0, 0, 2, 1, 0},
         {0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0}},
    };
    int mirror_N[4][5][5] = {
        {{0, 0, 0, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 2, 1, 0},
         {0, 0, 0, 1, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0},
         {0, 0, 2, 1, 0},
         {0, 1, 1, 0, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 1, 0, 0, 0},
         {0, 1, 2, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 1, 1, 0},
         {0, 1, 2, 0, 0},
         {0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0}},
    };
    int default_T[4][5][5] = {
        {{0, 0, 0, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 2, 1, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0},
         {0, 1, 2, 1, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 1, 2, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 0, 0, 0}},
        {{0, 0, 0, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 1, 2, 1, 0},
         {0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0}},
    };
};

class tetris_game
{
public:
    int ch;
    vector<vector<int>> grid;
    // Constructor -- Equivilant to INIT in Python
    tetris_game(int cols, int rows)
    {
        // Grid Generation
        
        grid = vector<vector<int>>(rows, vector<int>(cols));
    }
    void game_tick() {
        for (int i = 0; i < grid.size(); i++)
        {
            for (int j = 0; j < grid[i].size(); j++)
            {
                mvprintw(i , j + 5, "%d", grid[i][j]);
            }
        }

    }
};

int main()
{
    initscr();
    cbreak();
    noecho();
    keypad(stdscr, TRUE);
    //tick
    int ch;
    tetris_game game(10, 20);
    while ((ch = getch()) != KEY_BACKSPACE) {
        game.game_tick();
    }

    endwin();
}
